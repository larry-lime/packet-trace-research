.Dd July 4, 1996
.Dt TCPDPRIV 1
.Os BSD 4.3
.Sh NAME
.Nm tcpdpriv
.Nd remove private information from a tcpdump -w file
.Sh SYNOPSIS
.Nm tcpdpriv
.Op Fl a Ar [[hh:]mm:]ss
.Op Fl A Ar {0|1|2|50|99}
.Op Fl c Ar count
.Op Fl C Ar {0|1|2|3|4|...|32|99}
.Op Fl F Ar file
.Op Fl i Ar interface
.Op Fl M Ar {0|10|20|70|80|90|99}
.Op Fl O
.Op Fl p
.Op Fl P Ar {0|1|99}
.Op Fl q
.Op Fl r Ar inputfile
.Op Fl s Ar snaplen
.Op Fl S Ar {0|1|99}
.Op Fl T Ar {0|1|99}
.Op Fl U Ar {0|1|99}
.Op Fl w Ar outputfile
.Op Ar expression
.Nm tcpdpriv
.Op Fl C Ar 4
.Op Fl M Ar 20
.Op Fl P Ar 99
.Op Fl w Ar outputfile
.Op Fl r Ar inputfile
.Sh DESCRIPTION
.Nm Tcpdpriv
removes sensitive information from a packet trace,
replacing it with contrived information from which
the sensitive information cannot be reconstructed.
By removing the sensitive information, the output of
.Nm tcpdpriv
may be shared with others (for debugging or network analysis, say).
.Pp
In general, data which is not otherwise processed by
.Nm tcpdpriv
is
deleted.  For example, the data portion of a datagram is not included
in the output file.
.Pp
When a header is changed, the checksum for that header is also updated
to reflect the change in header data values.
.Pp
The various options provide different levels of privacy/security for
different portions of IP datagrams.  The numbers refer to the different
levels of security -- in general, smaller numbers are more secure.
.Pp
The number zero (0) is the default for each of the options.  This
provides the most secure output file, but may delete information helpful
to those interested in using the output.
.Pp
The number ninety-nine (99) generally means "release the information as
is".  This level is available for IP unicast and multicast addresses,
classness, TCP and IP options
and TCP and UDP port numbers.
.Pp
The payload inside an IP protocol type 4 ("ipip" or "ip-encaps") datagram
is assumed to be an encapsulated IP datagram and is transformed in the
same manner as the outer (encapsulating) IP datagram.
.Pp
The second form is an example that protects IP address information,
but releases TCP and
UDP port numbers as well as retaining information about which packets
were (IP-level) multicast packets.
This is a safe manner in which to run
.Nm tcpdpriv .
.Pp
.Bl -tag -width Ic
.It Fl a
Exit after
.Ar [[hh:]mm:]ss
time has expired.
.It Fl A
How IP addresses should be treated.  All-zeros and all-ones addresses
are never changed.  Level 0 maps different addresses
to integers (counting from 1).  Level 1 maps the upper and lower 16
bits, separately, to integers (counting from 1); the upper and lower
maps are independent (so, the address 128.130.128.130 may be mapped
to something like 0.3.0.28, eg, with the upper and lower 16 bits having
different values).
Level 2 maps each byte of the address separately
(again, counting from 1); each byte map is independent.
.Pp
Level 50 is more complicated (though more useful in certain situations).
With level 50,
if two of the original addresses were equal in the most significant N
bits, then these two addresses will map to private addresses that are
similarly equal in the most significant N bits.  (This feature can be
useful for using trace datasets to study the dynamics of various data
structures for forwarding tables, for example.)
.Pp
NOTE:  level 50 reveals more information about
a site's local network topology than the other levels.  This could be of
concern to some sites (but is probably not a concern for most sites).
(The document 'Thoughts on How to Mount an Attack on tcpdpriv's "-A50"
Option...', included with the
.Nm tcpdpriv
source distribution, discusses some of the issues related to level 50.)
.Pp
Level 99 passes IP addresses through unchanged.
.It Fl c
Exit after receiving
.Ar count
packets.
.It Fl C
How the "classness" of input and output IP addresses should be related.
(In "classic IP", there was a notion of "classness" associated with IP
addresses; an IP address was class A, class B, class C, or class D
depending on the first most significant bits of the IP header.)
Level 0 implies that no class information is carried through.
Level 1 implies that class A addresses are mapped into
class A addresses;
Level 2 implies that in addition, class B addresses are mapped into
class B addresses;
Level 3 implies that in addition, class C addresses are mapped into
class C addresses;
Level 4 implies that in addition, class D addresses (multicast)
are mapped into class D addresses.
.Pp
(In fact, the
.Fl C
flag actually preserves leading
.Em one (1)
bits; thus, level 32, for example, will map class A, B,
C, and D (respectively) addresses in to class A, B, C, and D (respectively)
addresses and will also map the all-ones IP broadcast address into in
an all-ones IP addresss.  Level 99 is a synonym for level 32.)
.It Fl F
Use
.Ar file
as input for the filter expression.  An additional expression
given on the command line is ignored.
.It Fl i
Listen on
.Ar interface .
If unspecified,
.Nm tcpdpriv
searches the system interface list for the lowest numbered, configured
up interface (excluding loopback).
.It Fl M
How multicast addresses are mapped:  level 0 implies map using the
.Fl A
and
.Fl C
option values; level 99 passes multicast addresses through unchanged.
The rest of the levels relate to the scoping of multicast datagrams:
level 10 passes multicast addresses in globally-scoped datagrams
through unchanged; level 20 passes multicast addresses in
continent-local datagrams through unchanged; level 70 passes multicast
addresses in site-local datagrams through unchanged; level 80 passes
multicast addresses in link-local datagrams through unchanged; level 90
passes multicast addresses in node-local datagrams through unchanged.
(Note that in IPv4, "scoping" is determined by TTL values.)
.It Fl O
Do not run the packet-matching code optimizer.  This is useful only if
you suspect a bug in the optimizer.
.It Fl p
Do not put the interface into promiscuous mode.  Note that the
interface might be in promiscuous mode for some other reason; hence,
`-p' cannot be used as an abbreviation for `ether host {localhost} or
broadcast'.
.It Fl P
Set the mapping for both TCP and UDP port numbers.
Level 0 maps the 16-bit port numbers to a single integer (see the
.Fl A
option above).
Level 1 maps each 8-bit byte in the port number to a single integer.
.It Fl q
Normally,
.Nm tcpdpriv
logs its command-line parameters and a summary at the end of execution
to standard error.  The
.Fl q
flag suppresses these messages.
.It Fl r
Read packets from
.Ar inputfile
(which was created with the -w option of
.Xr tcpdump 1 ).
Standard input is used if
.Ar inputfile
is ``-''.
.It Fl s
Snarf
.Ar snaplen
bytes of data from each packet rather than the default of 88 (with NIT,
the minimum is actually 96).  See the
.Xr tcpdump 1
man page for more information.
.It Fl S
How IP and TCP options should be treated.  Level 0 replaces all options
with NOPs (0x01, in both cases).  Level 1 leaves all the options alone.
.It Fl T
Set the mapping for just the TCP port numbers.  See the
.Fl P
option for details.
.It Fl U
Set the mapping for just the UDP port numbers.  See the
.Fl P
option for details.
.It Fl w Ar outputfile
Specifies the output file, which will look as if it had been generated by the
.Xr tcpdump 1
command, using its
.Fl w
option.  If this argument is not provided, the output will be written
to standard output (which is not allowed to be a terminal device).
.It Ar expression
selects which packets will be processed (packets not matching
.Ar expression
will be deleted).  See the
.Xr tcpdump 1
man page for details on the format of
.Ar expression .
.El
.Sh SEE ALSO
.Xr netstat 1 ,
.Xr tcpdump 1 ,
.Xr tcpslice 1 ,
.Xr pcap 3 ,
.Xr mount 8 .
.Pp
 'Thoughts on How to Mount an Attack on tcpdpriv's "-A50" Option...'
(included with the
.Nm tcpdpriv
source distribution).
.Sh HISTORY
The
.Nm tcpdpriv
command was written at Ipsilon Networks in 1996.  Many thanks to Vern Paxson
<vern@ee.lbl.gov> for his help/suggestions during
.Nm tcpdpriv's
development.
Thanks also to K. Claffy <kc@nlanr.net> and Tatu Ylonen <tatu@ssh.com>
for contributions and clarifications to the security aspects of
.Nm tcpdpriv .
Notwithstanding the help from these people, all bugs
remain the responsibility of the author (but, see the disclaimer below).
.Pp
Portions of
.Nm tcpdpriv
(and this man page) are extracted from
.Xr tcpdump 1
(available from ftp://ftp.ee.lbl.gov/tcpdump.tar.Z).
.Sh DIAGNOSTICS
Various, including complaining if "netstat -in" or "mount" are not accessible
(these are used in seeding the random number generator).
.Sh DISCLAIMER
THIS SOFTWARE IS PROVIDED BY IPSILON NETWORKS, INC., ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL IPSILON NETWORKS, INC., BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
.Sh BUGS
Link-level headers are passed through unchanged.
.Pp
Tcpdpriv should probably preserve the all-zeroes and all-ones
addresses.
.Pp
It would be nice if
.Nm tcpdpriv
could retain subnet broadcast information.
.Pp
.Nm Tcpdpriv
supports only SLIP, PPP, Ethernet, FDDI, and the NULL data links.
.Pp
FDDI is only supported on systems that have the include file
<netinet/if_fddi.h>.
.Pp
There should be some way to allow the various pre-defined multicast
addresses (such as "all-nodes", etc.) to be passed through unchanged.
.Pp
There is a bug in
.Xr tcpdump 1
which makes it unable to filter a 0.x.y.z address.
.Nm Tcpdpriv
attempts to avoid generating addresses in this format.  However,
with "-A50", it is
.Em possible
that
.Nm tcpdpriv
will, in fact, generate such an address.
